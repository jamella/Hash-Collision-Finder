\documentclass[12pt]{article}

\usepackage{sbc-template}

\usepackage{graphicx,url}

\usepackage[brazil]{babel}   
%\usepackage[latin1]{inputenc}  
\usepackage[utf8]{inputenc}  
% UTF-8 encoding is recommended by ShareLaTex

\usepackage{amsmath}
\usepackage{amsfonts}

\sloppy

\title{Instructions for Authors of SBC Conferences\\ Papers and Abstracts}

\author{Giovani Ferreira\inst{1}, Rafael Marconi\inst{1} }

\address{CEUB - Centro Universitário de Brasília \\
  Caixa Postal 4488 -- 70.904-970 -- Brasília -- DF -- Brazil
}

\begin{document}

\maketitle

\begin{abstract}
adhaskjdhaksjd \cite{tanenbaum2002distributed}
\end{abstract}

\section{Introduction}

Collision search is an important tool in cryptanalysis. A broad range of cryptanalytic problems
such as computing discrete logarithms, finding hash function collisions, and meet-in-the-middle
attacks can be reduced to the problem of finding two distinct inputs, \(a\) and \(b\), to a 
function \(f\) such that \(f(a) = f(b)\) \cite{van1999parallel}.

\section{Related Concepts} 

\iffalse
\subsection{Message Integrity}

Message integrity is normally maintained via the protocol called “MAC" or Message Authentication Code. 
To briefly explain its mechanism,

In the digital world, the techniques for transmission and integrity assurance of messages are in constant
evolution, aiming more efficient and secure protocols. A protocol's security can be threatened by inumerous
different ways, some possibly unknown yet, and requires a reasonable time of study, tests and attacks
to be considered for use in real applications.

O protocolo de autenticacao HMAC pode ser entendido em detalhes em \cite{krawczyk1997hmac}, mas como uma breve
introducao, consideremos o seguinte exemplo: Alice deseja se comunicar com Bob, a integridade deve ser
mantida, ou seja, the message should not be tampered with or changed to contain false or modified information:
\begin{enumerate}
\item Alice gera uma signing tag \(S(k, m)\), for \(m\) = message and \(k\) = secret key between Alice and Bob
\item Bob ao receber a mensagem, runs a verification algorithm, defined by \(V(k, m, tag) = V(k, m, S(k, m))\)
\item Using the same key, the algorithm will return \(yes\) which shows that message integrity has been mantained
\end{enumerate}

In that way, Bob is able to identify that the message sent by Alice was not compromised and its content
is exactly what Alice had written.

\fi

\subsection{Hash Collision}

Hash functions are designed to take a message of arbitrary bitlength and map it to a fixed size
output called a hash result. Let \(H : M \to R\) be such a hash function. Typically, 
hash functions are constructed from a function \(h: B \times R \to R\) which takes a fixed size block 
of message bits together with an intermediate hash result and produces a new intermediate hash result. 
A given message \(m \in \mathbb{M}\) is typically padded to a multiple of the block size and split 
into blocks \(m_1, m_2, ... , m_l \in B\). The padding often includes a field which indicates the 
number of bits in the original message. Beginning with some constant \(r_0 \in \mathbb{R}\), the sequence 
\(r_i = h(m_i, r_{i-1})\) is computed for \(i = 1, 2, ... , l\), and \(r_l\) is the hash result for message 
\(m\) \cite{van1999parallel}.

\subsection{Birthday Attack}

The birthday paradox is the counter-intuitive principle that for
groups of as few as \(23\) persons there is already a chance of about one half of finding two 
persons with the same birthday (assuming all birthdays are equally likely and disregarding 
leap years). Compared to finding someone in this group with your birthday where you have 
\(23\) independent chances and thus a success probability of \(\frac{23}{365} \approx 0.06\), this principle is 
based on the fact that there are \(\frac{23 * 22}{2} = 253\) distinct pairs of persons. This leads to 
a success probability of about \(0.5\) (note that this does not equal \(\frac{253}{365} \approx 0.7\) since these 
pairs are not independently distributed) \cite{stevens2012attacks}.

The following is the general algorithm for the Birthday Attack and in the next section I will discuss
the Birthday Paradox, which is a problem that gave birth to the Birthday Attack algorithm.
\begin{enumerate}
\item Let \(H : M \to \{0,1\}^n\) be a hash function. From this we know that the size of the tag space is \(\approx 2^n\) bits
and that \(| M | \gg 2^n\)
\item We choose \(2^\frac{n}{2}\) random messages in \(\mathbb{M}\), i.e. \(m_1, m_2, ... , m_{2^\frac{n}{2}} \in \mathbb{M}\).
\item For \(i = 1,2, ... , 2\frac{n}{2}\) compute \(t_i = H(m_i)\), where \(t_i\) is the hash value in the tag space.
\item We then search for any collisions, i.e. \(t_i = t_j\) for \(i, j \in {1, 2, ... , 2^\frac{n}{2}}\). If this is not
found we go back to step 1 and repeat with different message samples.
\end{enumerate}

\subsection{Se pa - Distributed System}
A distributed system is a collection of independent computers that appears to its users as a single 
coherent system \cite{tanenbaum2002distributed}.
 
\section{Experiments and Evaluation}

Foram aplicados tecnicas de paralelismo (openmp) e distribuicao (mpi) visando uma mlehora na performance
da busca por colisao. A funcao hash usada nos testes foi a MD5.

\section{Conclusions and Future work}

\bibliographystyle{sbc}
\bibliography{hash-collision}

\end{document}


